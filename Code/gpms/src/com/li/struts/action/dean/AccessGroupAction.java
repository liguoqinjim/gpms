/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.li.struts.action.dean;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.li.domain.Subject;
import com.li.domain.Teacher;
import com.li.domain.TeacherGroup;
import com.li.service.inters.SubjectServiceInter;
import com.li.service.inters.TeacherGroupServiceInter;
import com.li.service.inters.TeacherServiceInter;

public class AccessGroupAction extends Action {
	@Resource
	private TeacherServiceInter teacherServiceInter;
	@Resource
	private TeacherGroupServiceInter teacherGroupServiceInter;
	@Resource
	private SubjectServiceInter subjectServiceInter;

	public void setTeacherServiceInter(TeacherServiceInter teacherServiceInter) {
		this.teacherServiceInter = teacherServiceInter;
	}

	public void setTeacherGroupServiceInter(TeacherGroupServiceInter teacherGroupServiceInter) {
		this.teacherGroupServiceInter = teacherGroupServiceInter;
	}

	public void setSubjectServiceInter(SubjectServiceInter subjectServiceInter) {
		this.subjectServiceInter = subjectServiceInter;
	}

	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		// TODO Auto-generated method stub
		Teacher teacher = (Teacher) request.getSession().getAttribute("teacher");
		List<Teacher> teachers = teacherServiceInter.loadTeachersByDept(teacher.getDept().getDeptId());
		int[] teacherIds = new int[teachers.size()];
		long[] teacherSubjectNum = new long[teachers.size()];
		for (int i = 0; i < teachers.size(); i++) {
			teacherIds[i] = teachers.get(i).getId();
			teacherSubjectNum[i] = subjectServiceInter.getSubjectsNumByTeacher(teacherIds[i]);
		}

		// 按照教师题目的大小开始排序
		bubbleSortSpecial(teacherSubjectNum, teacherIds);

		// 开始分组
		int groupSize = teacherIds.length / 3;
		for (int i = 1; i <= groupSize; i++) {
			if (i == 1) {
				if (teacherIds.length % 3 != 0) {
					for (int j = 1; j <= 3; j++) {
						int teacherGroupLeader = j;
						int teacherGroupId = i;
						int teacher_id = i + 3 * (j - 1) - 1;
						Teacher teacher2 = (Teacher) teacherServiceInter.findById(
								Teacher.class, teacherIds[teacher_id]);

						TeacherGroup teacherGroup = new TeacherGroup(teacher2, teacherGroupId,
								teacherGroupLeader);
						teacherGroupServiceInter.add(teacherGroup);
					}

					// 第4个人
					int teacherGroupLeader = 4;
					int teacherGroupId = i;
					Teacher teacher2 = (Teacher) teacherServiceInter.findById(Teacher.class,
							teacherIds[teacherIds.length - 2]);// 倒数第二个老师
					TeacherGroup teacherGroup = new TeacherGroup(teacher2, teacherGroupId,
							teacherGroupLeader);
					teacherGroupServiceInter.add(teacherGroup);
				} else {// 三个人
					for (int j = 1; j <= 3; j++) {
						int teacherGroupLeader = j;
						int teacherGroupId = i;
						int teacher_id = i + 3 * (j - 1) - 1;
						Teacher teacher2 = (Teacher) teacherServiceInter.findById(
								Teacher.class, teacherIds[teacher_id]);

						TeacherGroup teacherGroup = new TeacherGroup(teacher2, teacherGroupId,
								teacherGroupLeader);
						teacherGroupServiceInter.add(teacherGroup);
					}
				}
			} else if (i == 2) {
				if (teacherIds.length % 3 == 2) {
					for (int j = 1; j <= 3; j++) {
						int teacherGroupLeader = j;
						int teacherGroupId = i;
						int teacher_id = i + 3 * (j - 1) - 1;
						Teacher teacher2 = (Teacher) teacherServiceInter.findById(
								Teacher.class, teacherIds[teacher_id]);

						TeacherGroup teacherGroup = new TeacherGroup(teacher2, teacherGroupId,
								teacherGroupLeader);
						teacherGroupServiceInter.add(teacherGroup);
					}

					// 第4个人
					int teacherGroupLeader = 4;
					int teacherGroupId = i;
					Teacher teacher2 = (Teacher) teacherServiceInter.findById(Teacher.class,
							teacherIds[teacherIds.length - 1]);// 最后一个老师
					TeacherGroup teacherGroup = new TeacherGroup(teacher2, teacherGroupId,
							teacherGroupLeader);
					teacherGroupServiceInter.add(teacherGroup);
				} else {// 三个人
					for (int j = 1; j <= 3; j++) {
						int teacherGroupLeader = j;
						int teacherGroupId = i;
						int teacher_id = i + 3 * (j - 1) - 1;
						Teacher teacher2 = (Teacher) teacherServiceInter.findById(
								Teacher.class, teacherIds[teacher_id]);

						TeacherGroup teacherGroup = new TeacherGroup(teacher2, teacherGroupId,
								teacherGroupLeader);
						teacherGroupServiceInter.add(teacherGroup);
					}
				}

			} else {
				for (int j = 1; j <= 3; j++) {
					int teacherGroupLeader = j;
					int teacherGroupId = i;
					int teacher_id = i + 3 * (j - 1) - 1;
					Teacher teacher2 = (Teacher) teacherServiceInter.findById(Teacher.class,
							teacherIds[teacher_id]);

					TeacherGroup teacherGroup = new TeacherGroup(teacher2, teacherGroupId,
							teacherGroupLeader);
					teacherGroupServiceInter.add(teacherGroup);
				}
			}

		}

		return mapping.findForward("deanAssessGroup");
	}

	// 冒泡排序
	public static void bubbleSortSpecial(long[] table, int[] id) {
		boolean exchange = true;
		for (int i = 1; i < table.length && exchange; i++) {
			exchange = false;
			for (int j = 0; j < table.length - 1; j++) {
				if (table[j] < table[j + 1]) {
					long temp = table[j];
					int tempId = id[j];
					table[j] = table[j + 1];
					id[j] = id[j + 1];
					table[j + 1] = temp;
					id[j + 1] = tempId;
					exchange = true;
				}
			}
		}
	}
}